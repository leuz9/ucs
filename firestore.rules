rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasRole(role) {
      return request.auth.token.role == role;
    }

    function hasAnyRole(roles) {
      return request.auth.token.role in roles;
    }

    // Collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (
        isOwner(userId) || 
        hasAnyRole(['admin', 'pastor'])
      );
      allow delete: if hasRole('pastor');
    }

    // Collection events
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        hasAnyRole(['moderator', 'admin', 'pastor']);
      allow update: if isAuthenticated() && (
        hasAnyRole(['moderator', 'admin', 'pastor']) ||
        (resource.data.createdBy == request.auth.uid)
      );
      allow delete: if isAuthenticated() && 
        hasAnyRole(['admin', 'pastor']);
    }

    // Collection prayers
    match /prayers/{prayerId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if hasAnyRole(['moderator', 'admin', 'pastor']);
    }

    // Collection newsletter_subscribers
    match /newsletter_subscribers/{subscriberId} {
      allow read: if isAuthenticated() && hasAnyRole(['admin', 'pastor']);
      allow create: if true;
      allow update, delete: if isAuthenticated() && hasAnyRole(['admin', 'pastor']);
    }

    // Collection forum_posts
    match /forum_posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        hasAnyRole(['moderator', 'admin', 'pastor'])
      );
      allow delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        hasAnyRole(['admin', 'pastor'])
      );
    }

    // Collection messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        resource.data.participants.hasAny([request.auth.uid]);
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.participants.hasAny([request.auth.uid]);
      allow delete: if hasRole('pastor');
    }
  }
}